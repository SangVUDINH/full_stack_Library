package com.store.library.customer;

import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("rest/customer/api")
public class CustomerRestController {

    public static final Logger LOGGER = LoggerFactory.getLogger(CustomerRestController.class);

    @Autowired
    private CustomerServiceImpl customerService;
    
    @CrossOrigin(origins = "http://localhost:4200")
    @GetMapping("/searchByLastName")
    public ResponseEntity<List<CustomerDTO>> searchCustomerByLastName(@RequestParam("lastname") String lastname){
        
        List<Customer> customers = customerService.findCustomerByLastName( lastname );
        if(!CollectionUtils.isEmpty( customers )) {
            customers.remove( Collections.singleton( null ) );
            List<CustomerDTO> customerDTOs = customers.stream().map( customer ->{
                return mapCustomerToCustomerDTO(customer);
            }).collect(Collectors.toList());
            
            return new ResponseEntity<List<CustomerDTO>>(customerDTOs, HttpStatus.OK);
        }
        
        
        return new ResponseEntity<List<CustomerDTO>>(HttpStatus.NO_CONTENT);
    }
    
    @CrossOrigin(origins = "http://localhost:4200")
    @GetMapping("/searchByEmail")
    public ResponseEntity<CustomerDTO> searchCustomerByEmail(@RequestParam("email") String email) {

        Customer customer = customerService.findCustomerByEmail(email);
        if (customer != null) {
            CustomerDTO customerDTO = mapCustomerToCustomerDTO(customer);
            return new ResponseEntity<CustomerDTO>(customerDTO, HttpStatus.OK);
        }
        return new ResponseEntity<CustomerDTO>(HttpStatus.NO_CONTENT);
    }
    
    @CrossOrigin(origins = "http://localhost:4200")
    @PostMapping("addCustomer")
    public ResponseEntity<CustomerDTO> createCustomer(@RequestBody CustomerDTO customerDTORequest){
        Customer existingCustomer = customerService.findCustomerByEmail( customerDTORequest.getEmail());
        if(existingCustomer !=null) {
            return new ResponseEntity<CustomerDTO>(HttpStatus.CONFLICT);
        }
        
        Customer customerRequest = mapCustomerDTOToCustomer(customerDTORequest);
        Customer customer = customerService.saveCustomer( customerRequest );
        
        if(customer !=null && customer.getId() !=null) {
            CustomerDTO customerDTO = mapCustomerToCustomerDTO(customer);
            return new ResponseEntity<CustomerDTO>(customerDTO, HttpStatus.OK); 
        }       
      
        return new ResponseEntity<CustomerDTO>(HttpStatus.NOT_MODIFIED);
    }

    @CrossOrigin(origins = "http://localhost:4200")
    @PutMapping("/updateCustomer")
    public ResponseEntity<CustomerDTO> updateCustomer(@RequestBody CustomerDTO customerDTORequest){
        
        if(!customerService.checkIfIdexists( customerDTORequest.getId() )) {
            return new ResponseEntity<CustomerDTO>(HttpStatus.NOT_FOUND);
        }
        
        Customer customerRequest = mapCustomerDTOToCustomer(customerDTORequest);        
        Customer customerResponse = customerService.updateCustomer( customerRequest );
        
        if(customerResponse != null) {
            CustomerDTO customerDTO = mapCustomerToCustomerDTO(customerResponse);
            return new ResponseEntity<CustomerDTO>(customerDTO, HttpStatus.OK);
        }
        
        return new ResponseEntity<CustomerDTO>(HttpStatus.NOT_MODIFIED);
    }
    
    @CrossOrigin(origins = "http://localhost:4200")
    @DeleteMapping("/deleteCustomer/{customerid}")
    public ResponseEntity<String> deleteCustomer(@PathVariable Integer customerid){
        customerService.deleteCustomer( customerid );
        return new ResponseEntity<String>(HttpStatus.NO_CONTENT);
    }
    
    @CrossOrigin(origins = "http://localhost:4200/rest/customer/deleteCustomer/")
    @GetMapping("/paginatedSearch")
    public ResponseEntity<List<CustomerDTO>> searchCustomers(@RequestParam("beginPage") int beginPage,
            @RequestParam("endPage") int endPage) {
        //, UriComponentsBuilder uriComponentBuilder
        Page<Customer> customers = customerService.getPaginatedCustomersList(beginPage, endPage);
        if (customers != null) {
            List<CustomerDTO> customerDTOs = customers.stream().map(customer -> {
                return mapCustomerToCustomerDTO(customer);
            }).collect(Collectors.toList());
            return new ResponseEntity<List<CustomerDTO>>(customerDTOs, HttpStatus.OK);
        }
        return new ResponseEntity<List<CustomerDTO>>(HttpStatus.NO_CONTENT);
    }
          
    private Customer mapCustomerDTOToCustomer( CustomerDTO customerDTORequest ) {
        ModelMapper mapper = new ModelMapper();        
        Customer customer = mapper.map( customerDTORequest,Customer.class );        
        return customer;
    }

    private CustomerDTO mapCustomerToCustomerDTO( Customer customer ) {               
        ModelMapper mapper = new ModelMapper();        
        CustomerDTO customerDTO = mapper.map( customer,CustomerDTO.class );        
        return customerDTO;
    }
    
    
}
